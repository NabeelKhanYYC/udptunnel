set (CPACK_PACKAGE_NAME ${PROJECT_NAME})
set (CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
# Find LICENSE file relative to build directory location
get_filename_component(BUILD_DIR_PARENT "${CMAKE_CURRENT_LIST_DIR}/.." ABSOLUTE)
set (CPACK_RESOURCE_FILE_LICENSE "${BUILD_DIR_PARENT}/LICENSE")

set (CPACK_PACKAGE_LICENSE "LGPLv2")
set (CPACK_RPM_PACKAGE_LICENSE ${CPACK_PACKAGE_LICENSE})
set (CPACK_FREEBSD_PACKAGE_LICENSE ${CPACK_PACKAGE_LICENSE})

set (CPACK_PACKAGE_MAINTAINER "Andrew Aladjev <andrew-aladjev@gmail.com>")
set (CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_MAINTAINER})
set (CPACK_FREEBSD_PACKAGE_MAINTAINER ${CPACK_PACKAGE_MAINTAINER})

set (CPACK_DEBIAN_PACKAGE_SECTION "net")
set (CPACK_FREEBSD_PACKAGE_ORIGIN "net/${PROJECT_NAME}")

# Set architecture from environment variable or auto-detect
if(DEFINED ENV{UDPTUNNEL_ARCH} AND NOT "$ENV{UDPTUNNEL_ARCH}" STREQUAL "")
    set (CPACK_PACKAGE_ARCHITECTURE "$ENV{UDPTUNNEL_ARCH}")
else()
    # Auto-detect architecture from CMAKE_SYSTEM_PROCESSOR (case-insensitive)
    string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" CMAKE_SYSTEM_PROCESSOR_LOWER)
    if(CMAKE_SYSTEM_PROCESSOR_LOWER MATCHES "x86_64|amd64")
        set (CPACK_PACKAGE_ARCHITECTURE "amd64")
    elseif(CMAKE_SYSTEM_PROCESSOR_LOWER MATCHES "aarch64|arm64")
        set (CPACK_PACKAGE_ARCHITECTURE "arm64")
    elseif(CMAKE_SYSTEM_PROCESSOR_LOWER MATCHES "armv7l|armv7")
        set (CPACK_PACKAGE_ARCHITECTURE "armhf")
    elseif(CMAKE_SYSTEM_PROCESSOR_LOWER MATCHES "i[3-6]86|x86")
        set (CPACK_PACKAGE_ARCHITECTURE "i386")
    else()
        # Fallback to detected processor name
        set (CPACK_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
    endif()
endif()
set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${CPACK_PACKAGE_ARCHITECTURE})
set (CPACK_RPM_PACKAGE_ARCHITECTURE ${CPACK_PACKAGE_ARCHITECTURE})

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
  set (CPACK_GENERATOR "DEB" "RPM")
elseif (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
  set (CPACK_GENERATOR "FREEBSD")
endif ()

set (PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set (CPACK_PACKAGE_FILE_NAME "${PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.${CPACK_PACKAGE_ARCHITECTURE}")
set (CPACK_STRIP_FILES true)

# Determine build type for package output
if(DEFINED ENV{UDPTUNNEL_STATIC} AND ("$ENV{UDPTUNNEL_STATIC}" STREQUAL "1" OR "$ENV{UDPTUNNEL_STATIC}" STREQUAL "true"))
    set (BUILD_TYPE "static")
else()
    set (BUILD_TYPE "dynamic")
endif()

set (CPACK_OUTPUT_FILE_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/output/${BUILD_TYPE}/${CPACK_PACKAGE_ARCHITECTURE}")
